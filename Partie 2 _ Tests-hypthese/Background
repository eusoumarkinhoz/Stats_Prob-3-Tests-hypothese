from scipy.stats import norm

# Paramètres de la distribution normale
moyenne = 0.7978866039964289
ecart_type = 0.6026432

# Calcul des intervalles pour les règles 68-95-99,7
intervalle_68 = (moyenne - ecart_type, moyenne + ecart_type)
intervalle_95 = (moyenne - 2 * ecart_type, moyenne + 2 * ecart_type)
intervalle_997 = (moyenne - 3 * ecart_type, moyenne + 3 * ecart_type)

# Calcul des probabilités pour chaque intervalle
prob_68 = halfnorm.ppf(intervalle_68[1]) - halfnorm.ppf(intervalle_68[0])
prob_95 = halfnorm.ppf(intervalle_95[1]) - halfnorm.ppf(intervalle_95[0])
prob_997 = halfnorm.ppf(intervalle_997[1]) - halfnorm.ppf(intervalle_997[0])

# Affichage des résultats
print("Règle 68-95-99,7:")
print("68% des données se situent entre", intervalle_68)
print("Probabilité théorique:", prob_68)
print("\n95% des données se situent entre", intervalle_95)
print("Probabilité théorique:", prob_95)
print("\n99,7% des données se situent entre", intervalle_997)
print("Probabilité théorique:", prob_997)


bruit_seul_std_abs = np.std(bruit_seul_abs)
bruit_seul_std_abs

bruit_seul_mean_abs = np.mean(bruit_seul_abs)
bruit_seul_mean_abs
probability_pdf = norm.pdf(bruit_seul_abs['Amplitude'], loc=bruit_seul_mean_abs, scale=bruit_seul_std_abs) 

sns.set_style('whitegrid')
sns.lineplot(x=bruit_seul_abs['Amplitude'], y=probability_pdf, color = 'orange')
plt.xlabel('Amplitude')
plt.ylabel('Probability Density')

plt.show()

probability_pdf = norm.pdf(bruit_seul_abs['Amplitude'], loc=bruit_seul_mean_abs, scale=2*bruit_seul_std_abs) 

sns.set_style('whitegrid')
sns.lineplot(x=bruit_seul_abs['Amplitude'], y=probability_pdf, color = 'orange')
plt.xlabel('Amplitude')
plt.ylabel('Probability Density')

plt.show()
probability_pdf = norm.pdf(bruit_seul_abs['Amplitude'], loc=bruit_seul_mean_abs, scale=3*bruit_seul_std_abs) 

sns.set_style('whitegrid')
sns.lineplot(x=bruit_seul_abs['Amplitude'], y=probability_pdf, color = 'orange')
plt.xlabel('Amplitude')
plt.ylabel('Probability Density')

plt.show()
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import norm

# Assuming you already have 'bruit_seul_abs', 'bruit_seul_mean_abs', and 'bruit_seul_std_abs' defined

# Set up the figure with three subplots
plt.figure(figsize=(15, 5))

# Plot 1
plt.subplot(1, 3, 1)
probability_pdf_1 = norm.pdf(bruit_seul_abs['Amplitude'], loc=bruit_seul_mean_abs, scale=bruit_seul_std_abs)
sns.lineplot(x=bruit_seul_abs['Amplitude'], y=probability_pdf_1, color='orange')
plt.title('1Sigma')
plt.xlabel('Amplitude')
plt.ylabel('Probability Density')

# Plot 2
plt.subplot(1, 3, 2)
probability_pdf_2 = norm.pdf(bruit_seul_abs['Amplitude'], loc=bruit_seul_mean_abs, scale=2*bruit_seul_std_abs)
sns.lineplot(x=bruit_seul_abs['Amplitude'], y=probability_pdf_2, color='blue')
plt.title('2Sigma')
plt.xlabel('Amplitude')
plt.ylabel('Probability Density')

# Plot 3
plt.subplot(1, 3, 3)
probability_pdf_3 = norm.pdf(bruit_seul_abs['Amplitude'], loc=bruit_seul_mean_abs, scale=3*bruit_seul_std_abs)
sns.lineplot(x=bruit_seul_abs['Amplitude'], y=probability_pdf_3, color='green')
plt.title('3Sigma')
plt.xlabel('Amplitude')
plt.ylabel('Probability Density')

# Adjust layout to prevent overlapping
plt.tight_layout()

# Show the plots
plt.show()

###wip

probability_pdf = norm.pdf(bruit_seul_abs['Amplitude'], loc=bruit_seul_mean_abs, scale=bruit_seul_std_abs) 

sns.set_style('darkgrid')
sns.lineplot(x=bruit_seul_abs['Amplitude'], y=probability_pdf, color = 'orange', label="sigma")

probability_pdf2 = norm.pdf(bruit_seul_abs['Amplitude'], loc=bruit_seul_mean_abs, scale=2*bruit_seul_std_abs)
sns.lineplot(x=bruit_seul_abs['Amplitude'], y=probability_pdf2, color = 'blue', label="2*sigma")

probability_pdf3 = norm.pdf(bruit_seul_abs['Amplitude'], loc=bruit_seul_mean_abs, scale=3*bruit_seul_std_abs)
sns.lineplot(x=bruit_seul_abs['Amplitude'], y=probability_pdf3, color = 'green', label="3*sigma")

plt.xlabel('Amplitude')
plt.ylabel('Probability Density')
plt.legend()
plt.show()

bruit_abs = halfnorm.ppf(2*bruit_seul_std_abs)
bruit_abs

#halfnorm.ppf(1-0.05)


===================


Pour calculer la probabilité de tirer k fois une amplitude supérieure ou égale à al lors de n tirages,
vous pouvez utiliser la fonction de distribution binomiale. La formule pour cela est donnée par la formule suivante :

P(X=k)=(nk)×pk×(1−p)n−kP(X=k)=(kn​)×pk×(1−p)n−k

où :

    nn est le nombre total de tirages,
    kk est le nombre de succès que vous souhaitez (amplitude supérieure ou égale à al),
    pp est la probabilité d'un succès lors d'un tirage,
    (nk)(kn​) est le coefficient binomial, représentant le nombre de façons de choisir kk succès parmi nn tirages.

Voici une fonction en Python qui utilise la bibliothèque scipy pour calculer la probabilité d'obtenir kk succès lors de nn tirages, en supposant une distribution binomiale :